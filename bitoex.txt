docker download
https://store.docker.com/search?type=edition&offering=community

下載 kitematic

golang download
https://golang.org/dl/

go語言建立目錄
mkdir -p workdir/src/github.com/hyperledger

cd workdir/src/github.com/hyperledger

git clone -b v0.6 https://github.com/hyperledger/fabric

##export GOPATH=絕對位置

download Burp Suite
https://portswigger.net/burp/




docker pull hyperledger/fabric-peer:x86_64-0.6.1-preview
docker tag hyperledger/fabric-peer:x86_64-0.6.1-preview hyperledger/fabric-peer:latest
docker tag hyperledger/fabric-peer:x86_64-0.6.1-preview hyperledger/fabric-baseimage


#########################################################################


docker run --name=vp0 \
    -p 7050:7050 \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e CORE_VM_ENDPOINT=unix:///var/run/docker.sock \
    -e CORE_LOGGING_LEVEL=debug \
    -e CORE_PEER_ID=vp0 \
    -e CORE_PEER_NETWORKID=dev \
    -e CORE_PEER_VALIDATOR_CONSENSUS_PLUGIN=pbft \
    -e CORE_PEER_ADDRESSAUTODETECT=true \
    -e CORE_PBFT_GENERAL_N=4 \
    -e CORE_PBFT_GENERAL_MODE=batch \
    -e CORE_PBFT_GENERAL_TIMEOUT_REQUEST=10s \
    hyperledger/fabric-peer:latest peer node start

docker run --name=vp1 \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e CORE_VM_ENDPOINT=unix:///var/run/docker.sock \
    -e CORE_LOGGING_LEVEL=debug \
    -e CORE_PEER_ID=vp1 \
    -e CORE_PEER_NETWORKID=dev \
    -e CORE_PEER_VALIDATOR_CONSENSUS_PLUGIN=pbft \
    -e CORE_PEER_ADDRESSAUTODETECT=true \
    -e CORE_PBFT_GENERAL_N=4 \
    -e CORE_PBFT_GENERAL_MODE=batch \
    -e CORE_PBFT_GENERAL_TIMEOUT_REQUEST=10s \
    -e CORE_PEER_DISCOVERY_ROOTNODE=172.17.0.2:7051 \
    hyperledger/fabric-peer:latest peer node start

docker run --name=vp2 \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e CORE_VM_ENDPOINT=unix:///var/run/docker.sock \
    -e CORE_LOGGING_LEVEL=info \
    -e CORE_PEER_ID=vp2 \
    -e CORE_PEER_NETWORKID=dev \
    -e CORE_PEER_VALIDATOR_CONSENSUS_PLUGIN=pbft \
    -e CORE_PEER_ADDRESSAUTODETECT=true \
    -e CORE_PBFT_GENERAL_N=4 \
    -e CORE_PBFT_GENERAL_MODE=batch \
    -e CORE_PBFT_GENERAL_TIMEOUT_REQUEST=10s \
    -e CORE_PEER_DISCOVERY_ROOTNODE=172.17.0.2:7051 \
    hyperledger/fabric-peer:latest peer node start

docker run --name=vp3 \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e CORE_VM_ENDPOINT=unix:///var/run/docker.sock \
    -e CORE_LOGGING_LEVEL=warring \
    -e CORE_PEER_ID=vp3 \
    -e CORE_PEER_NETWORKID=dev \
    -e CORE_PEER_VALIDATOR_CONSENSUS_PLUGIN=pbft \
    -e CORE_PEER_ADDRESSAUTODETECT=true \
    -e CORE_PBFT_GENERAL_N=4 \
    -e CORE_PBFT_GENERAL_MODE=batch \
    -e CORE_PBFT_GENERAL_TIMEOUT_REQUEST=10s \
    -e CORE_PEER_DISCOVERY_ROOTNODE=172.17.0.2:7051 \
    hyperledger/fabric-peer:latest peer node start


#########################################################################

peer chaincode deploy \
-p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 \
-c '{"function":"init", "args": [ "a" , "100" , "b" , "200"]}'

chaincode_name=ee5b24a1f17c356dd5f6e37307922e39ddba12e5d2e203ed93401d7d05eb0dd194fb9070549c5dc31eb63f4e654dbd5a1d86cbb30c48e3ab1812590cd0f78539


peer chaincode query -n $chaincode_name -c '{"Function": "query", "Args": ["a"]}'


peer chaincode invoke -n $chaincode_name -c '{"Function": "invoke", "Args": ["a", "b", "35"]}'


peer chaincode query -n $chaincode_name -c '{"Function": "query", "Args": ["a"]}'


#########################################################################


peer chaincode deploy \
-p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example04 \
-c '{"function":"init", "args": [ "e" , "0" ]}'

peer chaincode invoke \
-n 44d53a299f3f92fafcb0452877148f5d699247f20caa8756bf204d829338f73ee0a8168d8060a090330fd56cb770c3daa9dece75064532e2b2b2ca731e3f4ff6 \
-c '{"function":"invoke", "args": [ "e" , "1" ]}'

peer chaincode query \
-n 44d53a299f3f92fafcb0452877148f5d699247f20caa8756bf204d829338f73ee0a8168d8060a090330fd56cb770c3daa9dece75064532e2b2b2ca731e3f4ff6 \
-c '{"function":"query", "args": [ "e"  ]}'



############################
#  Call API 使用Burp Suite  #
############################

POST /chaincode HTTP/1.1
Host: 127.0.0.1:7050
User-Agent: curl/7.51.0
Accept: */*
Content-Length: 343
Connection: close

{
  "jsonrpc": "2.0",
  "method": "query",
  "params": {
    "type": 1,
    "chaincodeID": {
      "name":"ee5b24a1f17c356dd5f6e37307922e39ddba12e5d2e203ed93401d7d05eb0dd194fb9070549c5dc31eb63f4e654dbd5a1d86cbb30c48e3ab1812590cd0f78539"
    },
    "ctorMsg": {
      "function":"query",
      "args": ["a"]
    }
  },
  "id": 0
}



POST /chaincode HTTP/1.1
Host: 127.0.0.1:7050
User-Agent: curl/7.51.0
Accept: */*
Content-Length: 353
Connection: close

{
  "jsonrpc": "2.0",
  "method": "invoke",
  "params": {
    "type": 1,
    "chaincodeID": {
      "name":"ee5b24a1f17c356dd5f6e37307922e39ddba12e5d2e203ed93401d7d05eb0dd194fb9070549c5dc31eb63f4e654dbd5a1d86cbb30c48e3ab1812590cd0f78539"
    },
    "ctorMsg": {
      "function":"invoke",
      "args": ["b","a","5"]
    }
  },
  "id": 0
}


docker ps -a | egrep '(dev-)?vp\d' |awk '{print $1}' |xargs docker rm -f
docker images |grep dev-vp |awk '{print $1}' |xargs docker rmi -f